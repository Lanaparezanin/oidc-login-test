name: NuGet Login and Token Exchange

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

permissions:
  id-token: write  # Allow requesting OIDC token
  contents: read   # Optional, if you need repo content

jobs:
  nuget-login:
    runs-on: ubuntu-latest
    outputs:
      NUGET_API_KEY: ${{ steps.exchange-token.outputs.NUGET_API_KEY }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Get GitHub OIDC Token
      id: get-token
      run: |
        TOKEN=$(curl -s -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
          "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=api.nuget.org" | jq -r '.value')
        echo "::add-mask::$TOKEN"
        echo "token=$TOKEN" >> $GITHUB_OUTPUT

    - name: Exchange OIDC token for NuGet API key
      id: exchange-token
      run: |
        API_KEY_RESPONSE=$(curl -s -X POST "https://dev.nugettest.org/api/v2/token" \
          -H "Authorization: Bearer ${{ steps.get-token.outputs.token }}" \
          -H "Content-Type: application/json")
        # Extract the API key from the JSON response - adjust key name accordingly
        API_KEY=$(echo "$API_KEY_RESPONSE" | jq -r '.apiKey')
        if [ -z "$API_KEY" ] || [ "$API_KEY" == "null" ]; then
          echo "Failed to get API key"
          exit 1
        fi
        echo "::add-mask::$API_KEY"
        echo "NUGET_API_KEY=$API_KEY" >> $GITHUB_OUTPUT

    # Optionally, you can add a step here that pushes your package using the API key
    # - name: Push package
    #   run: dotnet nuget push path/to/package.nupkg -k ${{ steps.exchange-token.outputs.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json
